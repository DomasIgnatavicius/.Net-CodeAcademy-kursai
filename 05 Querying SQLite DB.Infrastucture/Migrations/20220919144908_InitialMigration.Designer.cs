// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _05_Querying_SQLite_DB.Infrastucture.Database;

#nullable disable

namespace _05_Querying_SQLite_DB.Infrastucture.Migrations
{
    [DbContext(typeof(BloggingContext))]
    [Migration("20220919144908_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("_05_Querying_SQLite_DB.Domain.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("_05_Querying_SQLite_DB.Domain.Models.AuthorBlog", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlogId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorId", "BlogId");

                    b.HasIndex("BlogId");

                    b.ToTable("AuthorBlogs");
                });

            modelBuilder.Entity("_05_Querying_SQLite_DB.Domain.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("BlogName")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT")
                        .HasColumnName("BlogRating")
                        .HasColumnOrder(2);

                    b.HasKey("BlogId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("_05_Querying_SQLite_DB.Domain.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlogId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("_05_Querying_SQLite_DB.Domain.Models.AuthorBlog", b =>
                {
                    b.HasOne("_05_Querying_SQLite_DB.Domain.Models.Author", "Author")
                        .WithMany("AuthorBlogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_05_Querying_SQLite_DB.Domain.Models.Blog", "Blog")
                        .WithMany("AuthorBlogs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("_05_Querying_SQLite_DB.Domain.Models.Post", b =>
                {
                    b.HasOne("_05_Querying_SQLite_DB.Domain.Models.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("_05_Querying_SQLite_DB.Domain.Models.Author", b =>
                {
                    b.Navigation("AuthorBlogs");
                });

            modelBuilder.Entity("_05_Querying_SQLite_DB.Domain.Models.Blog", b =>
                {
                    b.Navigation("AuthorBlogs");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
